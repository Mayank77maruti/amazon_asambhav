generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seller {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  phone         String?
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  session       Session?        // One-to-one relation with Session
  products      Product[]       // Relation with Products
  orders        Order[]         // Relation with Orders
}

model Session {
  id          String    @id @default(uuid())
  sellerId    String    @unique
  shop        String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  Seller      Seller    @relation(fields: [sellerId], references: [id])
}

model Product {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  bodyHtml      String
  productType   String
  sellerId      String
  shopifyId     BigInt?
  tags          String[]
  title         String
  vendor        String
  orderProducts OrderProduct[]  @relation("ProductToOrderProduct")
  Seller        Seller          @relation(fields: [sellerId], references: [id])
  images        ProductImage[]
  options       ProductOption[]
  variants      Variant[]
}

model ProductOption {
  id        String   @id @default(uuid())
  productId String
  name      String
  values    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
}

model Variant {
  id           String   @id @default(uuid())
  productId    String
  title        String
  price        Float
  sku          String?
  inventoryQty Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Product      Product  @relation(fields: [productId], references: [id])
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id                  String          @id @default(uuid())
  sellerId            String
  shopifyId           BigInt?         @unique
  status              String          // Order status (e.g., 'pending', 'completed')
  totalPrice          Float           // Total price of the order
  currency            String          // Order currency (e.g., 'USD')
  fulfillmentStatus   String?         // Fulfillment status from Shopify (e.g., 'fulfilled')
  financialStatus     String?         // Financial status (e.g., 'paid', 'partially_refunded')
  customerId          String?         // Reference to the Customer model
  billingAddressId    String?         // Foreign key for billing address
  shippingAddressId   String?         // Foreign key for shipping address
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt



  // Relations
  orderProducts       OrderProduct[]  @relation("OrderToOrderProduct")
  billingAddress      Address?        @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress     Address?        @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  fulfillment         Fulfillment[]   @relation("OrderToFulfillment")
  Seller              Seller          @relation(fields: [sellerId], references: [id])
  Customer            Customer?       @relation(fields: [customerId], references: [id])
}

model OrderProduct {
  id            String   @id @default(uuid())
  productId     String
  orderId       String
  quantity      Int
  price         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tax           Float?
  totalDiscount Float?
  Order         Order    @relation("OrderToOrderProduct", fields: [orderId], references: [id])
  Product       Product  @relation("ProductToOrderProduct", fields: [productId], references: [id])
}

model Address {
  id                   String   @id @default(uuid())
  firstName            String
  lastName             String
  address1             String
  address2             String?
  city                 String
  province             String
  provinceCode         String
  country              String
  countryCode          String
  postalCode           String
  phone                String?
  latitude             Float?
  longitude            Float?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  OrderBillingAddress  Order[]  @relation("OrderBillingAddress")
  OrderShippingAddress Order[]  @relation("OrderShippingAddress")
}

model Fulfillment {
  id              String   @id @default(uuid())
  orderId         String
  status          String
  trackingCompany String?
  trackingNumber  String?
  trackingUrl     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Order           Order    @relation("OrderToFulfillment", fields: [orderId], references: [id])
}

model Customer {
  id        String   @id @default(uuid())
  shopifyId BigInt?
  email     String
  firstName String
  lastName  String
  phone     String?
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}
