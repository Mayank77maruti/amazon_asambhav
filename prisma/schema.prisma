generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schema For Seller
model Seller {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  session       Session?        // One-to-one relation with Session
  products      Product[]       // Relation with Products
  orders        Order[]         // Relation with Orders
}

model Session {
  id          String    @id @default(uuid())
  sellerId    String    @unique
  shop        String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  Seller      Seller    @relation(fields: [sellerId], references: [id])  // One-to-one relation with Seller
}

model Product {
  id            String          @id @default(uuid())
  title         String
  bodyHtml      String
  vendor        String
  productType   String
  tags          String[]
  sellerId      String
  shopifyId     BigInt?         // Shopify Product ID
  variants      Variant[]
  options       ProductOption[]
  images        ProductImage[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  Seller        Seller          @relation(fields: [sellerId], references: [id]) // Relation to Seller
  orderProducts OrderProduct[]  @relation("ProductToOrderProduct") // Relation to OrderProduct
}

model ProductOption {
  id          String   @id @default(uuid())
  productId   String
  name        String
  values      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Product     Product  @relation(fields: [productId], references: [id]) // Relation to Product
}

model Variant {
  id           String   @id @default(uuid())
  productId    String
  title        String
  price        Float
  sku          String?
  inventoryQty Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Product      Product  @relation(fields: [productId], references: [id]) // Relation to Product
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product   Product  @relation(fields: [productId], references: [id]) // Relation to Product
}

// model Order {
//   id            String          @id @default(uuid())
//   sellerId      String
//   shopifyId     BigInt?         // Shopify Order ID
//   status        String
//   totalPrice    Float
//   orderProducts OrderProduct[]  @relation("OrderToOrderProduct") // Relation to OrderProduct
//   createdAt     DateTime        @default(now())
//   updatedAt     DateTime        @updatedAt

//   Seller        Seller          @relation(fields: [sellerId], references: [id]) // Relation to Seller
// }

// model OrderProduct {
//   id         String   @id @default(uuid())
//   productId  String
//   orderId    String
//   quantity   Int
//   price      Float
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   Product    Product  @relation("ProductToOrderProduct", fields: [productId], references: [id]) // Relation to Product
//   Order      Order    @relation("OrderToOrderProduct", fields: [orderId], references: [id])    // Relation to Order
// }

model Order {
  id                  String          @id @default(uuid())
  sellerId            String
  shopifyId           BigInt?         // Shopify Order ID
  status              String          // Order status (e.g., 'pending', 'completed')
  totalPrice          Float           // Total price of the order
  currency            String          // Order currency (e.g., 'USD')
  fulfillmentStatus   String?         // Fulfillment status from Shopify (e.g., 'fulfilled')
  financialStatus     String?         // Financial status (e.g., 'paid', 'partially_refunded')
  customerId          String?         // Reference to the Customer model
  billingAddressId    String?         // Foreign key for billing address
  shippingAddressId   String?         // Foreign key for shipping address
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  orderProducts       OrderProduct[]  @relation("OrderToOrderProduct")
  billingAddress      Address?        @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress     Address?        @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  fulfillment         Fulfillment[]   @relation("OrderToFulfillment")
  Seller              Seller          @relation(fields: [sellerId], references: [id])
  Customer            Customer?       @relation(fields: [customerId], references: [id])
}

model OrderProduct {
  id                  String   @id @default(uuid())
  orderId             String   // Reference to the Order
  productId           String   // Reference to the Product
  quantity            Int      // Quantity of the product in the order
  price               Float    // Price per unit
  tax                 Float?   // Tax on the product
  totalDiscount       Float?   // Discount applied to the product
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  Order               Order    @relation("OrderToOrderProduct", fields: [orderId], references: [id])
  Product             Product  @relation("ProductToOrderProduct", fields: [productId], references: [id])
}

model Address {
  id                  String    @id @default(uuid())
  firstName           String    // First name of the customer
  lastName            String    // Last name of the customer
  address1            String    // Primary address line
  address2            String?   // Secondary address line
  city                String    // City name
  province            String    // Province/State name
  provinceCode        String    // Province/State code
  country             String    // Country name
  countryCode         String    // Country code
  postalCode          String    // Postal/ZIP code
  phone               String?   // Phone number
  latitude            Float?    // Latitude for geolocation
  longitude           Float?    // Longitude for geolocation
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  OrderBillingAddress Order[]   @relation("OrderBillingAddress")
  OrderShippingAddress Order[]  @relation("OrderShippingAddress")
}

model Fulfillment {
  id                  String    @id @default(uuid())
  orderId             String    // Reference to the Order
  status              String    // Fulfillment status (e.g., 'fulfilled', 'failed')
  trackingCompany     String?   // Name of the tracking company (e.g., 'FedEx')
  trackingNumber      String?   // Tracking number
  trackingUrl         String?   // URL to track the shipment
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  Order               Order     @relation("OrderToFulfillment", fields: [orderId], references: [id])
}

model Customer {
  id                  String    @id @default(uuid())
  shopifyId           BigInt?   // Shopify Customer ID
  email               String    // Email of the customer
  firstName           String    // First name of the customer
  lastName            String    // Last name of the customer
  phone               String?   // Customer's phone number
  tags                String[] // Tags associated with the customer
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  orders              Order[]   
}