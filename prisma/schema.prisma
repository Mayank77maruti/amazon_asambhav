generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  upadtedAt DateTime  @updatedAt
  Store     Store     @relation(fields: [storeId], references: [id])
  Product   Product[]

  @@index([storeId])
}

model Color {
  id        String    @id
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Store     Store     @relation(fields: [storeId], references: [id])
  Product   Product[] @relation("ColorToProduct")

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color     String
  position  String
  Manu      Manu[]   @relation("ImageToManu")

  @@index([productId])
}

model Order {
  id                   String        @id @default(uuid())
  SellerProductId      String
  billingCountry       String
  billingCountryCode   String
  billingProvince      String
  billingProvinceCode  String
  codAmount            Float?
  currencyCode         String
  customerEmail        String
  customerId           String
  customerPhone        String
  sellerId             String
  shippingCountry      String?
  shippingCountryCode  String?
  shippingProvince     String?
  shippingProvinceCode String?
  shopifyOrderId       String
  totalAmount          Float
  LineItem             LineItem[]
  SellerProduct        SellerProduct @relation(fields: [SellerProductId], references: [id])
  Seller               Seller        @relation(fields: [sellerId], references: [id])
  Payment              Payment?
}

// Product Schema for Manufacturer
model Product {
  id             String   @id @default(uuid())
  storeId        String
  categoryId     String
  ManufacturerId String
  name           String
  price          Decimal
  Quantity       Decimal
  isFeatured     Boolean  @default(false)
  isArchived     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  description    String
  Image          String[]
  Manufacturer   Manu     @relation(fields: [ManufacturerId], references: [id])
  Category       Category @relation(fields: [categoryId], references: [id])
  Store          Store    @relation(fields: [storeId], references: [id])
  Color          Color[]  @relation("ColorToProduct")
  Size           Size[]   @relation("ProductToSize")

  @@index([categoryId])
  @@index([storeId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Store     Store     @relation(fields: [storeId], references: [id])
  Product   Product[] @relation("ProductToSize")

  @@index([storeId])
}

model Store {
  id        String     @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]
  Color     Color[]
  Product   Product[]
  Size      Size[]
}

// Schema For Seller
model Seller {
  id            String          @id @default(uuid())
  name          String
  email         String
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Order         Order[]
  Payment       Payment[]
  SellerProduct SellerProduct[]
  Session       Session[]
}

// Product Schema for Sellers
model SellerProduct {
  id             String       @id @default(uuid())
  SellerId       String
  name           String
  price          Decimal
  description    String
  isFeatured     Boolean      @default(true)
  isArchived     Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Color          String
  ManuId         String?      @unique
  Quantity       Decimal      @default(0)
  Size           String
  pricetocompare String
  Images         String[]
  Order          Order[]
  Product_id     Product_id[]
  Manu           Manu?        @relation(fields: [ManuId], references: [id])
  Seller         Seller       @relation(fields: [SellerId], references: [id])
}

model Design {
  id        String   @id @default(uuid())
  ManuId    String
  url       String
  color     String
  position  String
  height    String
  width     String
  details   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Manu      Manu     @relation(fields: [ManuId], references: [id], onDelete: Cascade)

  @@index([ManuId])
}

model Manu {
  id            String         @id @default(uuid())
  SellerId      String
  pricetoseller String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Color         String
  productId     String
  Design        Design[]
  Product       Product[]
  Mock          Mock[]
  SellerProduct SellerProduct?
  Image         Image[]        @relation("ImageToManu")
}

model Mock {
  id        String   @id @default(uuid())
  ManuId    String
  color     String
  position  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  Manu      Manu     @relation(fields: [ManuId], references: [id])
}

model Session {
  id          String    @id
  sellerId    String
  shop        String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  Seller      Seller    @relation(fields: [sellerId], references: [id])
}

model Product_id {
  id                 String        @id @default(uuid())
  SellerProductId    String
  Shopify_Product_id BigInt
  SellerProduct      SellerProduct @relation(fields: [SellerProductId], references: [id])
}

model LineItem {
  id           String @id
  orderId      String
  variantTitle String
  productId    String
  name         String
  price        Float
  quantity     Int
  totalPrice   Float
  Order        Order  @relation(fields: [orderId], references: [id])
}

model Payment {
  id       String  @id
  sellerId String
  orderId  String  @unique
  isCod    Boolean
  isPaid   Boolean
  Order    Order   @relation(fields: [orderId], references: [id])
  Seller   Seller  @relation(fields: [sellerId], references: [id])
}
