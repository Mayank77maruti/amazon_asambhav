name: Check Docker Image Build

on:
  schedule:
    - cron: '58 22 * * *'  # Runs every day at 10:58 PM
  workflow_dispatch:  
  pull_request:  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js version
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Cache dependencies
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      # Step 5: Lint code
      - name: Lint code
        run: npm run lint

      # Step 6: Run unit tests
      - name: Run unit tests
        run: npm test

      # Step 7: Build Docker image
      - name: Build Docker image
        run: docker build -t nextjs-app-test .

      # Step 8: Test Docker container
      - name: Start Docker container
        run: docker run --rm -d -p 3000:3000 --name test_container nextjs-app-test npm run dev

      # Step 9: Health check to ensure the app is running
      - name: Health check
        run: |
          sleep 5  # Wait for the app to start
          if ! curl --fail http://localhost:3000; then
            echo "Health check failed!"
            exit 1
          fi

      # Step 10: Check container logs
      - name: Check container logs
        run: docker logs test_container

  cleanup:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Cleanup Docker resources
        run: |
          docker stop test_container || true
          docker rm test_container || true
          docker rmi nextjs-app-test || true
